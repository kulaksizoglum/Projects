import math
import struct

def phi(n):
    amount = 0
    for k in range(1, n + 1):
        if math.gcd(n, k) == 1:
            amount += 1
    return amount
def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

def modinv(a, m):
    if a < 0:
        a = m+a
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m




p = 163812632438116402334651955238877888051471698595800699322979615035703105353498598900017754479082745390305183480326386193928762023006697325502630355995540302095536983747674239699082775937971908945314983176639634719523082664655125286220339981282043117576435108592265744474672826334454420325847233209118053745479
q = 167991311406281829893277907517380926743297770437237817698088843729837413680407121035993724942424328049100226903066919418963576739130754375674323262394889417412537943169688299724092631996519692955388293697048331540030669504591419100438660952486903606581569836090930608369486871356825028654569386086674053846173
e = 24167380932807504239964762959050608181052072818924462420440944589853986666535152290678483164713087547939617706544933073937438743674849799104159491240839348260324246460988250940447812376328941082868235473291224963034913948314545930105300659271488671935139477857113987097236226884629242409351548871694620398772197336903444812437569224804275890088559668152413817783852890241047035413304048206793334836912450607705141780806375259618885462560707010734585871217215939271094068309518364230203157486297286544871904254305379453493937519141682453326416659514227521354356779202232509796359880023499074722911112885933118651425829
c = 21194027877221209252532944554115296298068550273026811097724631984955956461694198755220230294168005128470003106327250916246670574858779239543516027440141559406664276723402769767498014210688563103182668963229853712170892259971587732776722679519976771734885031418486068674400808900963734636871151823761474113661814991520069244818528455745426962838850855604369765397024497931688768425376697288667268860274316895709676926571337544100556805069889255058627417615809131539051280113984608934633401822372246989424850341142597153022251648989642057062549894044882277755239829946583573285048270025093875316034571444410295888222961

n = p * q
phi_n = (p - 1) * (q - 1)
print("The gcd of e,phi_n",math.gcd(e,phi_n))
d= modinv(e,phi_n)
m = pow(c, d, n)
print("M is ",m)

num_bytes = (m.bit_length()+8) // 8
bytearray=m.to_bytes(num_bytes)
unicode_string = bytearray.decode('utf-8')
print(unicode_string)





